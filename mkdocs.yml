# Site information
site_name: Outlines
site_author: The Outlines developers
site_description: >-
    Structured text generation with LLMs

# Repository
repo_name: dottxt-ai/outlines
repo_url: https://github.com/dottxt-ai/outlines

# Copyright
copyright: Copyright &copy; 2023- The Outlines Developers

# Documentation directory
docs_dir: docs_new

# Configuration
theme:
    name: material
    palette:
        # Palette toggle for light mode
        - media: "(prefers-color-scheme: light)"
          scheme: default
          primary: white
    logo: assets/images/logo-square.svg
    favicon: assets/images/logo-simple.png
    icon:
        repo: fontawesome/brands/github
    features:
        - content.code.copy
        - navigation.expand
        - navigation.tabs
        - navigation.sections
        - header.autohide
        - announce.dismiss
    font:
        text: Inter
        code: Source Code Pro

# Additional configuration
extra:
    social:
        - icon: fontawesome/brands/github
          link: https://github.com/dottxt-ai
        - icon: fontawesome/brands/twitter
          link: https://twitter.com/remilouf
    generator: false
    analytics:
        provider: google
        property: !ENV GOOGLE_ANALYTICS_KEY
    version:
        provider: mike
        default: latest
        alias: true

# Extensions
markdown_extensions:
    - admonition
    - def_list
    - attr_list
    - md_in_html
    - pymdownx.highlight:
          anchor_linenums: true
          line_spans: __span
          pygments_lang_class: true
          noclasses: True
    - pymdownx.superfences:
          custom_fences:
              - name: mermaid
                class: mermaid
                format: !!python/name:pymdownx.superfences.fence_code_format
    - pymdownx.tabbed:
          alternate_style: true
    - pymdownx.inlinehilite
    - pymdownx.details
    - pymdownx.emoji:
          emoji_index: !!python/name:material.extensions.emoji.twemoji
          emoji_generator: !!python/name:material.extensions.emoji.to_svg
    - pymdownx.snippets:

extra_css:
    - stylesheets/extra.css

plugins:
    - blog
    - mkdocstrings:
          default_handler: python
          handlers:
              python:
                  options:
                      docstring_style: numpy
                      show_submodules: true
    - search
    - section-index
    - social:
          cards_layout_options:
              color: #173a58
    - redirects:
          redirect_maps:
              "welcome.md": "index.md"
              "reference/chat_templating.md": "user_guide/chat_templating.md"
              "blog.md": "https://blog.dottxt.co"
              "cookbook/index.md": "examples/index.md"
              "cookbook/classification.md": "examples/classification.md"
              "cookbook/extraction.md": "examples/extraction.md"
              "cookbook/dating_profiles.md": "examples/dating_profiles.md"
              "cookbook/chain_of_density.md": "examples/chain_of_density.md"
              "cookbook/models_playing_chess.md": "examples/models_playing_chess.md"
              "cookbook/simtom.md": "examples/simtom.md"
              "cookbook/qa-with-citations.md": "examples/qa-with-citations.md"
              "cookbook/knowledge_graph_extraction.md": "examples/knowledge_graph_extraction.md"
              "cookbook/structured_generation_workflow.md": "examples/structured_generation_workflow.md"
              "cookbook/chain_of_thought.md": "examples/chain_of_thought.md"
              "cookbook/react_agent.md": "examples/react_agent.md"
              "cookbook/atomic_caption.md": "examples/atomic_caption.md"
              "cookbook/read-pdfs.md": "examples/read-pdfs.md"
              "cookbook/earnings-reports.md": "examples/earnings-reports.md"
              "cookbook/receipt-digitization.md": "examples/receipt-digitization.md"
              "cookbook/extract_event_details.md": "examples/extract_event_details.md"
              "cookbook/deploy-using-bentoml.md": "examples/deploy-using-bentoml.md"
              "cookbook/deploy-using-cerebrium.md": "examples/deploy-using-cerebrium.md"
              "cookbook/deploy-using-modal.md": "examples/deploy-using-modal.md"

              # Root files
              "quickstart.md": "getting_started/index.md"

              # API to reference redirects
              "api/index.md": "reference/index.md"
              "api/json_schema.md": "reference/types/json_schema.md"
              "api/regex.md": "reference/types/regex.md"
              "api/applications.md": "reference/utility/application.md"
              "api/templates.md": "reference/utility/template.md"
              "api/guide.md": "reference/advanced/guide.md"
              "api/parsing.md": "reference/advanced/parsing.md"
              "api/models.md": "reference/available_models.md"

              # API subdirectories to reference
              "api/types/": "reference/types/index.md"
              "api/core/": "reference/index.md"
              "api/advanced/": "reference/index.md"

    - git-committers:
        repository: dottxt-ai/outlines
        branch: main
    - git-revision-date-localized:
        enable_creation_date: true
        type: timeago

nav:
    - Home:
          - index.md
          - User Guide: user_guide/index.md
          - API Reference: reference/index.md
          - Examples: examples/index.md
    - Guide:
          - Introduction:
                - Get started: getting_started/index.md
                - Installation: installation.md
                - Licence: licence.md
          - User Guide:
                - The Basics: user_guide/index.md
                - Selecting an Inference Engine: user_guide/selecting_an_inference_backend.md
                - Unstructured Text Generation: user_guide/unstructured.md
                - Structured Generation: user_guide/structured_generation/index.md
                - Chat Templating for Instruct Models: user_guide/chat_templating.md
                - Generation Formats:
                      - JSON: user_guide/structured_generation/json.md
                      - Regular expressions: user_guide/structured_generation/regex.md
                      - Context-free grammars: user_guide/structured_generation/cfg.md
                      - Multiple choice: user_guide/structured_generation/multiple_choice.md
                - Prompting:
                      - Applications: user_guide/prompting/applications.md
                      - Templates: user_guide/prompting/templates.md
                - Easy Regular Expressions: user_guide/regex_dsl.md
                - Migrating to v1: user_guide/migration.md
    - API Reference:
          - Overview: reference/index.md
          - Format types:
                - Overview: reference/types/index.md
                - JSON: reference/types/json_schema.md
                - Regex: reference/types/regex.md
                - Context-free grammars: reference/types/cfg.md

          - Core:
                - Generator: reference/core/generator.md

          - Supported Models:
                - Anthropic: reference/models/anthropic.md
                - Dottxt: reference/models/dottxt.md
                - Gemini: reference/models/gemini.md
                - Llamacpp: reference/models/llamacpp.md
                - Mlx-lm: reference/models/mlxlm.md
                - Ollama: reference/models/ollama.md
                - OpenAI: reference/models/openai.md
                - SgLang: reference/models/sglang.md
                - TGI: reference/models/tgi.md
                - Transformers: reference/models/transformers.md
                - vLLM (online server): reference/models/vllm.md
                - vLLM (offline): reference/models/vllm_offline.md

          - Utilities:
                - Applications: reference/utility/application.md
                - Template: reference/utility/template.md

          - Advanced:
                - Guide: reference/advanced/guide.md
                - Parsing: reference/advanced/parsing.md
    - Examples:
          - examples/index.md
          - Classification: examples/classification.md
          - Named Entity Extraction: examples/extraction.md
          - Generate synthetic data: examples/dating_profiles.md
          - Summarize a document: examples/chain_of_density.md
          - Playing chess: examples/models_playing_chess.md
          - Perspective-taking prompting: examples/simtom.md
          - Question-answering with citations: examples/qa-with-citations.md
          - Knowledge Graph Extraction: examples/knowledge_graph_extraction.md
          - Structured Generation Workflow: examples/structured_generation_workflow.md
          - Chain of Thought (CoT): examples/chain_of_thought.md
          - ReAct Agent: examples/react_agent.md
          - Vision-Language Models: examples/atomic_caption.md
          - Structured Generation from PDFs: examples/read-pdfs.md
          - Earnings reports to CSV: examples/earnings-reports.md
          - Digitizing receipts with vision models: examples/receipt-digitization.md
          - Extract events details from text: examples/extract_event_details.md
          - Run on the cloud:
                - BentoML: examples/deploy-using-bentoml.md
                - Cerebrium: examples/deploy-using-cerebrium.md
                - Modal: examples/deploy-using-modal.md
    - Community:
        - community/index.md
        - Feedback ü´∂: community/feedback.md
        - Our Discord Server ‚òï: https://discord.com/invite/R9DSu34mGd
        - How to Contribute üèóÔ∏è: community/contribute.md
        - Community Projects üëè: community/examples.md
        - Versioning Guide üìå: community/versioning.md

    - Blog: https://blog.dottxt.co
